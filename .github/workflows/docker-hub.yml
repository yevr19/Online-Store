name: Build, Test, and Push Docker Image to Docker Hub

on:
  push:
    branches:
      - master

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build the Docker image
        run: docker-compose -f docker-compose.yml -f docker-compose-services.yml build --no-cache

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Start the Docker services
        run: docker-compose -f docker-compose.yml -f docker-compose-services.yml up -d

      - name: Get container ID for online-store-app
        run: |
          container_id=$(docker-compose -f docker-compose.yml -f docker-compose-services.yml ps -q online-store-app)
          echo "CONTAINER_ID=$container_id" >> $GITHUB_ENV

      - name: Wait for online-store-app to be healthy
        run: |
          retries=0
          until [ $(docker inspect --format "{{json .State.Health.Status }}" $CONTAINER_ID) == "healthy" ] || [ $retries -eq 5 ]; do
            echo "Waiting for online-store-app to be healthy..."
            sleep 20s
            retries=$((retries + 1))
          done

          if [ $retries -eq 5 ]; then
            echo "Failed to get a healthy status for online-store-app"
            exit 1
          fi

  push_to_registry:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: "{{defaultContext}}"
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker Scout
        id: docker-scout
        uses: docker/scout-action@v0.18
        with:
          command: cves,recommendations,compare
          to-latest: true
          ignore-base: true
          ignore-unchanged: true
          only-fixed: true
